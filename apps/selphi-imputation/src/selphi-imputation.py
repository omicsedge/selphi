#!/usr/bin/env python
# selphi-imputation 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://documentation.dnanexus.com/developer for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os, subprocess, dxpy, glob

@dxpy.entry_point('main')
def main(refpanel, cores, match_length, target=None, ref_source_vcf=None, prepare_reference=None, map=None, outvcf=None, ref_source_xsi=None, pbwt_path=None, tmp_path=None):

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.
    project_id = dxpy.PROJECT_CONTEXT_ID  # Use the current project ID

    if target is not None:
        target = dxpy.DXFile(target)
    if ref_source_vcf is not None:
        ref_source_vcf = dxpy.DXFile(ref_source_vcf)
    if map is not None:
        map = dxpy.DXFile(map)
    if ref_source_xsi is not None:
        ref_source_xsi = dxpy.DXFile(ref_source_xsi)

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    if target is not None:
        dxpy.download_dxfile(target.get_id(), "/target")

    if ref_source_vcf is not None:
        dxpy.download_dxfile(ref_source_vcf.get_id(), "/ref_source")

    if map is not None:
        dxpy.download_dxfile(map.get_id(), "/map")

    if ref_source_xsi is not None:
        dxpy.download_dxfile(ref_source_xsi.get_id(), "/ref_source")

    # Fill in your application code here.
    # Load Docker image
    _ = subprocess.check_output([
        "docker load < /image.tar"
    ], shell=True)

    _ = subprocess.check_output([
        "mkdir /reference"
    ], shell=True)

    _ = subprocess.check_output([
        f"mkdir /output"
    ],shell=True)

    refpanel_prefix_name = os.path.basename(refpanel)
    output_folder = os.path.dirname(refpanel)

    if prepare_reference is not None and ref_source_vcf is not None:
        _ = subprocess.check_output([
            f"docker run -v /:/data selphi --prepare_reference --ref_source_vcf /data/ref_source --refpanel /data/reference/{refpanel_prefix_name} --cores {cores}"
        ], shell=True)

    if prepare_reference is not None and ref_source_xsi is not None:
        _ = subprocess.check_output([
            f"docker run -v /:/data selphi --prepare_reference --ref_source_xsi /data/ref_source --refpanel /data/reference/{refpanel_prefix_name} --cores {cores}"
        ], shell=True)

    if prepare_reference is not None:
        results = glob.glob(f"/reference/*")
        references_file = []
        for reference in results:
            file_obj = dxpy.upload_local_file(reference, project=project_id, folder=output_folder)
            references_file.append(file_obj.get_id())

        output = {}
        output["outvcf"] = [dxpy.dxlink(item) for item in references_file]

        return output

    else:
        
        output_name = os.path.basename(outvcf)
        output_folder = os.path.dirname(outvcf)

        dir_name = os.path.dirname(refpanel)
        for extension in ['.srp', '.pbwt', '.sites', '.samples']:
            complete_name = os.path.basename(refpanel) + extension
            file_obj = dxpy.find_one_data_object(classname="file", name=complete_name, folder=dir_name, project=project_id)
            dxpy.download_dxfile(file_obj["id"], f"/reference/{complete_name}")
            if os.path.exists(f"/reference/{complete_name}"):
                print(f"{complete_name} file downloaded successfully.")
            else:
                print(f"{complete_name} file not found. Check the download process.")
        _ = subprocess.check_output([
            f"docker run -v /:/data selphi --target /data/target --refpanel /data/reference/{refpanel_prefix_name} --map /data/map --outvcf /data/output/{output_name} --cores {cores}"
        ], shell=True)

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    if os.path.exists(f"/output/{output_name}.vcf.gz"):
        print(f"{output_name}.vcf.gz output created successfully.")
    else:
        print(f"{output_name}.vcf.gz output not found. Error")

    results = glob.glob(f"/output/*")
    vcf_file = []
    for vcf in results:
        file_obj = dxpy.upload_local_file(vcf, project=project_id, folder=output_folder)
        vcf_file.append(file_obj.get_id())

    output = {}
    output["outvcf"] = [dxpy.dxlink(item) for item in vcf_file]

    return output

dxpy.run()
